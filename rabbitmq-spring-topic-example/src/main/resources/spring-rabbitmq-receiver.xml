<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/rabbit
      http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd">
 
    <!-- 扫描文件（自动将servicec层注入） -->
    <context:component-scan base-package="com.yihg.rabbitmq.consumer" />
    
    <!-- 连接服务配置  -->
  <!--   <rabbit:connection-factory id="connectionFactory"  addresses="192.168.0.82:56720" username="admin" password="admin"   /> -->
  
       <rabbit:connection-factory id="connectionFactory"  addresses="192.168.100.222:5672" username="admin" password="yihg"   />
    <!-- queue 队列声明-->
    <rabbit:queue id="queue_demo" name="queue_demo"  durable="true" auto-delete="false" exclusive="false" />
    
   <!-- exchange 交换器声明  queue binging key 绑定 -->
    <rabbit:topic-exchange name="exchange_demo" durable="true" auto-delete="false" id="exchange_demo">
        <rabbit:bindings>
          <rabbit:binding queue="queue_demo" pattern="exchange_demo_key" />  
           <!--  <rabbit:binding queue="queue_demo" key="queue_demo_key"/> -->
           <!--  <rabbit:binding queue="queue_cate_pub" key="queue_cate_pub_key"/> -->
        </rabbit:bindings>
    </rabbit:topic-exchange>
      
    <!-- 用于接收消息的处理普通类 因为经过的  messageListenerAdapter适配器转换 -->    
    <bean id="rmqConsumer"  class="com.yihg.rabbitmq.consumer.RmqConsumer"></bean>  
     <!-- 创建消息转换器为SimpleMessageConverter -->  
    <bean id="serializerMessageConverter"  class="org.springframework.amqp.support.converter.SimpleMessageConverter"></bean> 
    
    <!-- 配置方法   :一                         -->
    <!--  消息监听适配器     指定接受消息的转换类和接收类 以及接收方法   -->
    <bean id="messageListenerAdapter"  class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">    
        <constructor-arg ref="rmqConsumer" />    
        <property name="defaultListenerMethod" value="rmqProducerMessage"></property>    
        <property name="messageConverter" ref="serializerMessageConverter"></property>    
    </bean>    
      
    <!-- 用于消息的监听的容器类SimpleMessageListenerContainer,监听队列  queues可以传多个-->    
    <bean id="listenerContainer"  class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">    
        <property name="queues" ref="queue_demo"></property>    
        <property name="connectionFactory" ref="connectionFactory"></property>    
        <property name="messageListener" ref="messageListenerAdapter"></property>    
    </bean>   
    
 
 	
    <!-- 配置方法   : 二                   -->
    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->  
    <!-- 异步的线程池，线程池的最在数不能设定太小，不然<rabbit:listener/>/@RabbitListener太多的话，会出现发无法正常消费问题 -->  
    <!-- <task:executor id="taskExecutor" pool-size="4-256" queue-capacity="128"/>  -->
    <!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象prefetch 每次请求拿到几个消息 公平调度 channel.basicQos属性设置 -->
    <!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列，由于fastjson的速度快于jackson,这里替换为fastjson的一个实现 -->
    <!--   <bean id="jsonMessageConverter"  class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"></bean> -->
    <!--  <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto" prefetch="1" message-converter="jsonMessageConverter" > -->
    <!--      <rabbit:listener ref="listener" queue-names="remoting.queue" /> -->
        <!-- <rabbit:listener queues="queue_cate_pub" ref="queueOneCatePubLitener"  /> -->
        <!-- <rabbit:listener queue-names="queue_one" ref="myQueueHandler" method="handlerText"/>
        <rabbit:listener queue-names="queue_cate_pub" ref="myQueueHandler" method="handlerCatePub" /> -->
    <!--    </rabbit:listener-container> -->
    <!--  <bean id ="queueOneLitener" class ="com.yihg.rabbit.QueueOneLitener" /> -->
      
</beans>